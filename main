

#include <Adafruit_NeoPixel.h>
#define LED1_PIN    2   //pin for strip 1
#define LED2_PIN    3   //pin for strip 1
#define LED3_PIN    4   //pin for strip 1
#define LED4_PIN    5   //pin for strip 1
#define LED5_PIN    6   //pin for strip 1

#define LED_COUNT 10   //pixel count  

#define switchState 3    //Pin for STEP switch other side of switch goes go to ground
#define switchReset 4   //Pin for RESET switch other side of switch goes to ground

Adafruit_NeoPixel strip1(LED_COUNT, LED1_PIN, NEO_GRBW + NEO_KHZ800);
Adafruit_NeoPixel strip2(LED_COUNT, LED2_PIN, NEO_GRBW + NEO_KHZ800);
Adafruit_NeoPixel strip3(LED_COUNT, LED3_PIN, NEO_GRBW + NEO_KHZ800);
Adafruit_NeoPixel strip4(LED_COUNT, LED4_PIN, NEO_GRBW + NEO_KHZ800);
Adafruit_NeoPixel strip5(LED_COUNT, LED5_PIN, NEO_GRBW + NEO_KHZ800);

int BS1;
int BS2;
int state = 0;
int reset = 0;
int frame = 0; 
int Pix[] = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
int color[] = {0,0,0,0};
Adafruit_NeoPixel strips[] = {strip1, strip2, strip3, strip4, strip5};

int red[] = {255,0,0};
int green[] = {0,255,0};
int blue[] = {0,0,255};
int white[] = {255,255,255};


//TODO: Make for loops dynamic. Make Chase. Make other Effects.

void setup() {
  strip1.begin();
  strip1.show();
  strip2.begin();
  strip2.show();
  strip3.begin();
  strip3.show();
  strip4.begin();
  strip4.show();
  strip5.begin();
  strip5.show();
  
  pinMode(switchState, INPUT_PULLUP);
  pinMode(switchReset, INPUT_PULLUP);

  BS1 = digitalRead(switchState);
  BS2 = digitalRead(switchReset);

}

void loop() {
  // put your main code here, to run repeatedly:

  cBtn();  //Gets the button presses.

  switch (state) {   //This is the step we are in for the dress.
    case 0:
      stepOne(0);
      break;

    case 1:
      stepTwo(1);
      break;
  
  frame++;
  }
}

void setColor(int color[], Adafruit_NeoPixel _strip) {    // Sets color of specifies strip with specified color
  for(int i = 0; i<10; i++) {
    _strip.setPixelColor(Pix[i], color[0], color[1], color[2], color[3]);
  }  
  
}

void chaseColor(int color[], Adafruit_NeoPixel strip, int _speed, int _direction int size){     //Has a strip do a chase with a color at a speed in a direction
  
    // Make the dang thing.

    // We need to establish what the values should be.
    // These will depend on the size. so if we have a size of 0, it's just one pixel.
    // A size of 1 will do one pixel to either side of the main pixel
    // So if that was the case, the middle pixel would be at 100% and either side would be 50%
    // If it were size 2, the middle would be 100%, the next out would be 75% and the next would be 25%, etc.
        // I was thinking we could even do different curves aside from this linear one, but that's a future problem.

    // We set these values as a target value
    // we take the current value and proportionally move it towards the target value
    // This is determined by the _speed
    // Once they're at those values, set new values and fade to those.

  for(int i =0; i<10; i++;){
    _strip.setPixelColor(Pix[i], color[0], color[1], color[2], color[3]);
  
  }

}

void stepOne(int _state) {

  //in this area, we run through things to do once.
  
  for (int i = 0; i <4; i++){
    setColor(red, strips[i]);
  }

  
  while(true){   
    cBtn();  //Make sure this is still the step we're in.
     if (state != _state){
      return; // leave if it's not.
      }

      // in this area we do things that happen over and over
  } 
}



void stepTwo(int _state) {

  //in this area, we run through things to do once.
  
  for (int i = 0; i <4; i++){
    setColor(red, strips[i]);
  }
  
  while(true){   
    cBtn();  //Make sure this is still the step we're in.
     if (state != _state){
      return; // leave if it's not.
      }

      // in this area we do things that happen over and over
  }  
}



void cBtn() {
  int valA =  digitalRead(switchState);
  int valB =  digitalRead(switchReset);
  delay(10);
  int valAA = digitalRead(switchState);
  int valBB = digitalRead(switchReset);

  if (valA == valAA) {
    if (valA != BS1) {
      if (valA == LOW) {
        state++;
      }
    }
  }

  if (valB == valBB) {
    if (valB != BS2) {
      if (valB == LOW) {
        state= 0;
        }
      }
    }
  BS1 = valA;
  BS2 = valB;
  }
